// ===== 1. C·∫¨P NH·∫¨T CONFIG.JSON =====
// Th√™m v√†o config.json
{
    "payos": {
        "enable": true,
            "clientId": "YOUR_PAYOS_CLIENT_ID",
                "apiKey": "YOUR_PAYOS_API_KEY",
                    "checksumKey": "YOUR_PAYOS_CHECKSUM_KEY",
                        "webhookUrl": "https://your-domain.com", // URL webhook c·ªßa b·∫°n
                            "cancelUrl": "https://your-domain.com/payment-cancel",
                                "returnUrl": "https://your-domain.com/payment-success",
                                    "package": {
            "basic": {
                "name": "G√≥i C∆° B·∫£n",
                    "price": 50000,
                        "days": 30,
                            "description": "G√≥i c∆° b·∫£n 1 th√°ng, ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng"
            },
            "premium": {
                "name": "G√≥i Premium",
                    "price": 100000,
                        "days": 60,
                            "description": "G√≥i premium 2 th√°ng, ∆∞u ti√™n h·ªó tr·ª£"
            },
            "vip": {
                "name": "G√≥i VIP",
                    "price": 200000,
                        "days": 90,
                            "description": "G√≥i VIP 3 th√°ng, t√≠nh nƒÉng ƒë·ªôc quy·ªÅn"
            }
        }
    },
    "freeTrialDays": 3,
        "adminBot": ["YOUR_ADMIN_USER_ID"]
}

// ===== 2. KH·ªûI T·∫†O H·ªÜ TH·ªêNG TRONG GOAT.JS =====
// Th√™m v√†o cu·ªëi file Goat.js (tr∆∞·ªõc d√≤ng cu·ªëi)
const PaymentIntegration = require('./bot/handler/paymentIntegration.js');

// Kh·ªüi t·∫°o h·ªá th·ªëng thanh to√°n
(async () => {
    if (global.GoatBot.config.payos?.enable) {
        try {
            global.paymentSystem = new PaymentIntegration();
            await global.paymentSystem.initialize();
            console.log('‚úÖ Payment system initialized successfully');
        } catch (error) {
            console.error('‚ùå Failed to initialize payment system:', error);
        }
    }
})();

// ===== 3. MIDDLEWARE KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P =====
// C·∫≠p nh·∫≠t bot/handler/handlerEvents.js - th√™m v√†o ƒë·∫ßu h√†m onStart()
async function checkGroupAccess(threadID, senderID) {
    try {
        const { threadsData } = global.db;
        const config = global.GoatBot.config;

        // Admin bot lu√¥n c√≥ quy·ªÅn truy c·∫≠p
        if (config.adminBot && config.adminBot.includes(senderID)) {
            return { allowed: true };
        }

        const threadData = await threadsData.get(threadID);
        const groupStatus = threadData.data?.status;
        const expiresAt = threadData.data?.expiresAt;
        const isPermanent = threadData.data?.isPermanent;
        const createdAt = threadData.createdAt;

        // Ki·ªÉm tra th·ªùi gian d√πng th·ª≠ mi·ªÖn ph√≠
        const moment = require('moment-timezone');
        const now = moment();
        const created = moment(createdAt);
        const freeTrialDays = config.freeTrialDays || 3;
        const freeTrialExpires = created.add(freeTrialDays, 'days');

        // N·∫øu trong th·ªùi gian d√πng th·ª≠ v√† ch∆∞a h·∫øt h·∫°n
        if (now.isBefore(freeTrialExpires) && (!groupStatus || groupStatus !== 'active')) {
            return { allowed: true, isTrial: true };
        }

        // Ki·ªÉm tra tr·∫°ng th√°i nh√≥m ƒë√£ k√≠ch ho·∫°t
        if (!groupStatus || groupStatus !== 'active') {
            return {
                allowed: false,
                message: await generateActivationMessage(threadID, threadData)
            };
        }

        // Ki·ªÉm tra h·∫øt h·∫°n (tr·ª´ permanent)
        if (!isPermanent && expiresAt) {
            const expiry = moment(expiresAt);
            if (now.isAfter(expiry)) {
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i h·∫øt h·∫°n
                await threadsData.set(threadID, {
                    status: 'expired',
                    expiredAt: new Date().toISOString()
                }, 'data');

                return {
                    allowed: false,
                    message: await generateActivationMessage(threadID, threadData, true)
                };
            }
        }

        return { allowed: true };

    } catch (error) {
        console.error('Error checking group access:', error);
        return { allowed: true }; // Cho ph√©p s·ª≠ d·ª•ng n·∫øu c√≥ l·ªói
    }
}

async function generateActivationMessage(threadID, threadData, isExpired = false) {
    const config = global.GoatBot.config.payos;
    const prefix = global.utils.getPrefix(threadID);

    if (!config || !config.enable) {
        return "‚ùå H·ªá th·ªëng thanh to√°n ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh";
    }

    const packages = Object.entries(config.package);
    const renewalCount = threadData.data?.renewalCount || 0;

    let message = isExpired ?
        `‚ùå NH√ìM ƒê√É H·∫æT H·∫†N\n\n` :
        `üîí NH√ìM CH∆ØA ƒê∆Ø·ª¢C K√çCH HO·∫†T\n\n`;

    message += `üì¶ C√ÅC G√ìI D·ªäCH V·ª§ HI·ªÜN C√ì:\n\n`;

    packages.forEach(([key, pkg], index) => {
        const discount = renewalCount > 0 ? calculateRenewalDiscount(renewalCount) : 0;
        const finalPrice = pkg.price * (1 - discount / 100);

        message += `${index + 1}. ${pkg.name}\n`;
        message += `   üí∞ Gi√°: ${pkg.price.toLocaleString()}ƒë`;
        if (discount > 0) {
            message += ` ‚Üí ${finalPrice.toLocaleString()}ƒë (gi·∫£m ${discount}%)`;
        }
        message += `\n   ‚è∞ Th·ªùi h·∫°n: ${pkg.days} ng√†y\n`;
        message += `   üìù ${pkg.description}\n`;
        message += `   üí≥ Mua: ${prefix}payment buy ${key}\n\n`;
    });

    message += `üéÅ Ho·∫∑c s·ª≠ d·ª•ng m√£ redeem: ${prefix}redeem <m√£>\n`;
    message += `üìû Li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£!`;

    return message;
}

function calculateRenewalDiscount(renewalCount) {
    const baseDiscount = 5;
    const incrementDiscount = 2;
    const maxDiscount = 20;
    return Math.min(baseDiscount + (renewalCount * incrementDiscount), maxDiscount);
}

// ===== 4. C·∫¨P NH·∫¨T HANDLER EVENTS ƒê·ªÇ KI·ªÇM TRA QUY·ªÄN =====
// Trong bot/handler/handlerEvents.js, c·∫≠p nh·∫≠t h√†m onStart() 
async function onStart() {
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p tr∆∞·ªõc khi x·ª≠ l√Ω l·ªánh
    if (!body || !body.startsWith(prefix))
        return;

    const args = body.slice(prefix.length).trim().split(/ +/);
    let commandName = args.shift().toLowerCase();
    let command = GoatBot.commands.get(commandName) || GoatBot.commands.get(GoatBot.aliases.get(commandName));

    // C√°c l·ªánh ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng m√† kh√¥ng c·∫ßn k√≠ch ho·∫°t
    const allowedCommands = ['payment', 'pay', 'thanhtoan', 'redeem', 'code', 'giftcode', 'help', 'info'];

    if (command && !allowedCommands.includes(commandName)) {
        const accessCheck = await checkGroupAccess(threadID, senderID);
        if (!accessCheck.allowed) {
            return await message.reply(accessCheck.message);
        }

        // Th√¥ng b√°o n·∫øu ƒëang trong th·ªùi gian d√πng th·ª≠
        if (accessCheck.isTrial) {
            const moment = require('moment-timezone');
            const threadData = await threadsData.get(threadID);
            const created = moment(threadData.createdAt);
            const freeTrialExpires = created.add(global.GoatBot.config.freeTrialDays || 3, 'days');
            const daysLeft = freeTrialExpires.diff(moment(), 'days');

            if (daysLeft <= 1) {
                await message.reply(`‚ö†Ô∏è TH√îNG B√ÅO: Th·ªùi gian d√πng th·ª≠ c√≤n ${daysLeft} ng√†y. S·ª≠ d·ª•ng "${prefix}payment" ƒë·ªÉ k√≠ch ho·∫°t vƒ©nh vi·ªÖn!`);
            }
        }
    }

    // Ti·∫øp t·ª•c x·ª≠ l√Ω l·ªánh nh∆∞ b√¨nh th∆∞·ªùng...
    // [Ph·∫ßn code x·ª≠ l√Ω l·ªánh hi·ªán t·∫°i]
}

// ===== 5. C·∫¨P NH·∫¨T WEBHOOK HANDLER =====
// C·∫≠p nh·∫≠t bot/handler/webhook/paymentWebhook.js
const express = require('express');
const PaymentHandler = require('../paymentHandler.js');

class PaymentWebhookServer {
    constructor() {
        this.app = express();
        this.paymentHandler = new PaymentHandler();
        this.server = null;
        this.setupMiddleware();
        this.setupRoutes();
    }

    setupRoutes() {
        // PayOS webhook endpoint
        this.app.post('/payos-webhook', async (req, res) => {
            try {
                console.log('üîî PayOS Webhook received:', JSON.stringify(req.body, null, 2));

                const webhookData = req.body;
                const { orderCode, code, desc, data } = webhookData;

                if (code === '00') {
                    // Thanh to√°n th√†nh c√¥ng
                    await this.processSuccessfulPayment(orderCode, data);

                    // G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
                    await this.sendSuccessNotification(orderCode);
                } else {
                    // Thanh to√°n th·∫•t b·∫°i
                    await this.processFailedPayment(orderCode, desc);
                }

                res.json({
                    success: true,
                    message: 'Webhook processed successfully'
                });

            } catch (error) {
                console.error('‚ùå PayOS Webhook error:', error);
                res.status(500).json({
                    success: false,
                    message: 'Webhook processing failed',
                    error: error.message
                });
            }
        });
    }

    async processSuccessfulPayment(orderCode, paymentData) {
        try {
            const { paymentData: paymentController, threadsData } = global.db;

            // T√¨m th√¥ng tin thanh to√°n
            const payment = await paymentController.findByTransactionId(orderCode.toString());
            if (!payment) {
                console.error('Payment not found:', orderCode);
                return;
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
            await paymentController.updatePaymentStatus(
                orderCode.toString(),
                'PAID',
                new Date().toISOString(),
                paymentData
            );

            // K√≠ch ho·∫°t nh√≥m
            const packageInfo = global.GoatBot.config.payos.package[payment.packageType || 'basic'];
            if (packageInfo) {
                const moment = require('moment-timezone');
                const expiresAt = moment().add(packageInfo.days, 'days').toISOString();

                await threadsData.set(payment.threadID, {
                    status: 'active',
                    activatedAt: new Date().toISOString(),
                    expiresAt: expiresAt,
                    packageType: payment.packageType,
                    renewalCount: (await threadsData.get(payment.threadID, 'data.renewalCount', 0)) + 1
                }, 'data');

                console.log(`‚úÖ Activated group ${payment.threadID} with package ${payment.packageType}`);
            }

        } catch (error) {
            console.error('Error processing successful payment:', error);
        }
    }

    async sendSuccessNotification(orderCode) {
        try {
            const api = global.GoatBot.fcaApi;
            if (!api) return;

            const { paymentData: paymentController } = global.db;
            const payment = await paymentController.findByTransactionId(orderCode.toString());
            if (!payment) return;

            const packageInfo = global.GoatBot.config.payos.package[payment.packageType || 'basic'];
            const moment = require('moment-timezone');

            const message = `üéâ THANH TO√ÅN TH√ÄNH C√îNG!\n\n` +
                `‚úÖ Nh√≥m ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!\n` +
                `üì¶ G√≥i: ${packageInfo?.name || 'Kh√¥ng x√°c ƒë·ªãnh'}\n` +
                `üí∞ S·ªë ti·ªÅn: ${payment.amount.toLocaleString()}ƒë\n` +
                `‚è∞ Th·ªùi h·∫°n: ${packageInfo?.days || 0} ng√†y\n` +
                `üìÖ H·∫øt h·∫°n: ${moment().add(packageInfo?.days || 0, 'days').format('DD/MM/YYYY HH:mm')}\n\n` +
                `üéØ C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!\n` +
                `ü§ñ Bot gi·ªù ƒë√£ ho·∫°t ƒë·ªông ƒë·∫ßy ƒë·ªß trong nh√≥m n√†y.`;

            await api.sendMessage(message, payment.threadID);

        } catch (error) {
            console.error('Error sending success notification:', error);
        }
    }
}

// ===== 6. C·∫¨P NH·∫¨T REDEEM COMMAND =====
// C·∫≠p nh·∫≠t scripts/cmds/redeem.js ƒë·ªÉ t√≠ch h·ª£p v·ªõi database
const RedeemManager = require('../../bot/handler/redeemManager.js');

module.exports = {
    config: {
        name: "redeem",
        aliases: ["code", "giftcode"],
        version: "2.1",
        author: "ABC Bot",
        countDown: 5,
        role: 0,
        description: {
            vi: "S·ª≠ d·ª•ng m√£ redeem ƒë·ªÉ nh·∫≠n th∆∞·ªüng ho·∫∑c k√≠ch ho·∫°t nh√≥m",
            en: "Use redeem codes to get rewards or activate groups"
        },
        category: "system",
        guide: {
            vi: "   {pn} <m√£ code>: S·ª≠ d·ª•ng m√£ redeem\n" +
                "   {pn} create <lo·∫°i> <gi√° tr·ªã> [ghi ch√∫]: T·∫°o m√£ redeem (Admin)\n" +
                "   {pn} list: Xem danh s√°ch m√£ redeem (Admin)",
            en: "   {pn} <code>: Use redeem code\n" +
                "   {pn} create <type> <value> [notes]: Create redeem code (Admin)\n" +
                "   {pn} list: View redeem code list (Admin)"
        }
    },

    onStart: async function ({ message, args, event, getLang, role, threadsData, usersData }) {
        const { threadID, senderID } = event;
        const redeemManager = new RedeemManager();

        if (!args[0]) {
            return message.reply("‚ùå Vui l√≤ng nh·∫≠p m√£ redeem\nV√≠ d·ª•: " + global.utils.getPrefix(threadID) + "redeem BOT-ABC12345");
        }

        const subCommand = args[0].toLowerCase();

        try {
            switch (subCommand) {
                case "create":
                    await this.handleCreate(message, args, role, redeemManager);
                    break;
                case "list":
                    await this.handleList(message, args, role, redeemManager);
                    break;
                default:
                    await this.handleUse(message, args[0], threadID, senderID, redeemManager, threadsData, usersData);
                    break;
            }
        } catch (error) {
            console.error("Redeem command error:", error);
            message.reply("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau");
        }
    },

    // S·ª≠ d·ª•ng m√£ redeem v·ªõi t√≠ch h·ª£p database
    async handleUse(message, code, threadID, senderID, redeemManager, threadsData, usersData) {
        if (!redeemManager.validateRedeemCode(code)) {
            return message.reply("‚ùå M√£ redeem kh√¥ng h·ª£p l·ªá\nFormat ƒë√∫ng: BOT-XXXXXXXX");
        }

        try {
            // S·ª≠ d·ª•ng m√£ redeem
            const result = await redeemManager.useRedeemCode(code.toUpperCase(), threadID, senderID);

            if (result.success) {
                let successMessage = result.message;

                // X·ª≠ l√Ω k√≠ch ho·∫°t nh√≥m
                if (result.activationResult) {
                    if (result.activationResult.isPermanent) {
                        successMessage += `\nüëë Nh√≥m ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t Vƒ®NH VI·ªÑN!`;
                    } else if (result.activationResult.expiresAt) {
                        const moment = require('moment-timezone');
                        const expiryDate = moment(result.activationResult.expiresAt).format('DD/MM/YYYY HH:mm');
                        successMessage += `\n‚è∞ Nh√≥m k√≠ch ho·∫°t ƒë·∫øn: ${expiryDate}`;
                    }
                }

                // X·ª≠ l√Ω th√™m ti·ªÅn
                if (result.rewardType === 'MONEY' && result.rewardValue > 0) {
                    await usersData.addMoney(senderID, result.rewardValue);
                    successMessage += `\nüí∞ ƒê√£ th√™m ${result.rewardValue.toLocaleString()}ƒë v√†o t√†i kho·∫£n`;
                }

                return message.reply("üéâ S·ª¨ D·ª§NG M√É REDEEM TH√ÄNH C√îNG!\n\n" + successMessage);
            } else {
                return message.reply("‚ùå " + result.message);
            }

        } catch (error) {
            console.error('Redeem use error:', error);
            message.reply("‚ùå C√≥ l·ªói khi s·ª≠ d·ª•ng m√£ redeem: " + error.message);
        }
    },

    // T·∫°o m√£ redeem (Admin only)
    async handleCreate(message, args, role, redeemManager) {
        if (role < 2) {
            return message.reply("‚ùå Ch·ªâ admin bot m·ªõi c√≥ th·ªÉ t·∫°o m√£ redeem");
        }

        if (args.length < 3) {
            return message.reply(
                "üìù C√°ch t·∫°o m√£ redeem:\n" +
                "‚Ä¢ redeem create DAYS <s·ªë ng√†y> [ghi ch√∫]\n" +
                "‚Ä¢ redeem create PERMANENT 0 [ghi ch√∫]\n" +
                "‚Ä¢ redeem create MONEY <s·ªë ti·ªÅn> [ghi ch√∫]\n\n" +
                "V√≠ d·ª•:\n" +
                "‚Ä¢ redeem create DAYS 30 Event th√°ng 12\n" +
                "‚Ä¢ redeem create PERMANENT 0 Gift VIP"
            );
        }

        const rewardType = args[1].toUpperCase();
        const rewardValue = parseInt(args[2]);
        const notes = args.slice(3).join(' ') || 'Kh√¥ng c√≥ ghi ch√∫';

        if (!['DAYS', 'PERMANENT', 'MONEY'].includes(rewardType)) {
            return message.reply("‚ùå Lo·∫°i m√£ kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£: DAYS, PERMANENT, MONEY");
        }

        if (rewardType !== 'PERMANENT' && (isNaN(rewardValue) || rewardValue <= 0)) {
            return message.reply("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá. Ph·∫£i l√† s·ªë > 0 (tr·ª´ PERMANENT = 0)");
        }

        try {
            const codes = await redeemManager.createRedeemCode({
                rewardType: rewardType,
                rewardValue: rewardType === 'PERMANENT' ? 0 : rewardValue,
                notes: notes,
                quantity: 1
            });

            let valueText = '';
            switch (rewardType) {
                case 'DAYS':
                    valueText = `${rewardValue} ng√†y`;
                    break;
                case 'PERMANENT':
                    valueText = 'Vƒ©nh vi·ªÖn';
                    break;
                case 'MONEY':
                    valueText = `${rewardValue.toLocaleString()}ƒë`;
                    break;
            }

            message.reply(
                `‚úÖ T·∫°o m√£ redeem th√†nh c√¥ng!\n\n` +
                `üéÅ M√£: \`${codes[0]}\`\n` +
                `üì¶ Lo·∫°i: ${rewardType}\n` +
                `üíé Gi√° tr·ªã: ${valueText}\n` +
                `üìù Ghi ch√∫: ${notes}`
            );

        } catch (error) {
            console.error('Create redeem error:', error);
            message.reply("‚ùå L·ªói khi t·∫°o m√£ redeem: " + error.message);
        }
    }
};

// ===== 7. C·∫¨P NH·∫¨T PAYMENT COMMAND =====
// C·∫≠p nh·∫≠t scripts/cmds/payment.js ƒë·ªÉ t√≠ch h·ª£p ho√†n ch·ªânh
const PaymentHandler = require('../../bot/handler/paymentHandler.js');
const fs = require('fs');

module.exports = {
    config: {
        name: "payment",
        aliases: ["pay", "thanhtoan"],
        version: "2.1",
        author: "ABC Bot",
        countDown: 10,
        role: 0,
        description: {
            vi: "Qu·∫£n l√Ω thanh to√°n v√† k√≠ch ho·∫°t bot cho nh√≥m",
            en: "Manage payment and bot activation for groups"
        },
        category: "system"
    },

    onStart: async function ({ message, args, event, threadsData, role }) {
        const { threadID, senderID } = event;
        const paymentHandler = new PaymentHandler();
        const subCommand = args[0]?.toLowerCase();

        try {
            switch (subCommand) {
                case "info":
                case "status":
                    await this.handleInfo(message, threadID, threadsData);
                    break;
                case "packages":
                case "pkg":
                    await this.handlePackages(message);
                    break;
                case "buy":
                    if (role < 1) {
                        return message.reply("‚ùå Ch·ªâ admin nh√≥m m·ªõi c√≥ th·ªÉ mua g√≥i d·ªãch v·ª•");
                    }
                    await this.handleBuy(message, args, threadID, senderID, threadsData, paymentHandler);
                    break;
                case "admin":
                    if (role < 2) {
                        return message.reply("‚ùå Ch·ªâ admin bot m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y");
                    }
                    await this.handleAdmin(message, args, threadID, threadsData);
                    break;
                default:
                    await this.handleInfo(message, threadID, threadsData);
                    break;
            }
        } catch (error) {
            console.error("Payment command error:", error);
            message.reply("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau");
        }
    },

    // Th√¥ng tin tr·∫°ng th√°i nh√≥m
    async handleInfo(message, threadID, threadsData) {
        const threadData = await threadsData.get(threadID);
        const moment = require('moment-timezone');
        const created = moment(threadData.createdAt);
        const now = moment();
        const freeTrialDays = global.GoatBot.config.freeTrialDays || 3;
        const freeTrialExpires = created.clone().add(freeTrialDays, 'days');

        let statusText = "‚ö™ Ch∆∞a k√≠ch ho·∫°t";
        let expiryText = "Kh√¥ng c√≥";
        let packageText = "Ch∆∞a c√≥ g√≥i";

        const status = threadData.data?.status;
        const expiresAt = threadData.data?.expiresAt;
        const isPermanent = threadData.data?.isPermanent;
        const packageType = threadData.data?.packageType;

        // Ki·ªÉm tra th·ªùi gian d√πng th·ª≠
        if (now.isBefore(freeTrialExpires) && (!status || status !== 'active')) {
            const trialDaysLeft = freeTrialExpires.diff(now, 'days');
            statusText = `üü° ƒêang d√πng th·ª≠ (${trialDaysLeft} ng√†y c√≤n l·∫°i)`;
            expiryText = freeTrialExpires.format('DD/MM/YYYY HH:mm');
        } else if (status === 'active') {
            if (isPermanent) {
                statusText = "üü¢ ƒêang ho·∫°t ƒë·ªông (Vƒ©nh vi·ªÖn)";
                expiryText = "Vƒ©nh vi·ªÖn";
            } else {
                statusText = "üü¢ ƒêang ho·∫°t ƒë·ªông";
                expiryText = moment(expiresAt).format('DD/MM/YYYY HH:mm');
            }

            if (packageType) {
                const packageInfo = global.GoatBot.config.payos.package[packageType];
                packageText = packageInfo ? packageInfo.name : packageType;
            }
        } else if (status === 'expired') {
            statusText = "üî¥ ƒê√£ h·∫øt h·∫°n";
            expiryText = moment(expiresAt).format('DD/MM/YYYY HH:mm');
        }

        const renewalCount = threadData.data?.renewalCount || 0;
        const discount = renewalCount > 0 ? this.calculateRenewalDiscount(renewalCount) : 0;

        const infoMessage =
            `üìä TH√îNG TIN NH√ìM\n\n` +
            `üè∑Ô∏è Tr·∫°ng th√°i: ${statusText}\n` +
            `üì¶ G√≥i hi·ªán t·∫°i: ${packageText}\n` +
            `‚è∞ H·∫øt h·∫°n: ${expiryText}\n` +
            `üîÑ S·ªë l·∫ßn gia h·∫°n: ${renewalCount}\n` +
            `üíé Gi·∫£m gi√° gia h·∫°n: ${discount}%\n\n` +
            `üìÖ Nh√≥m t·∫°o: ${created.format('DD/MM/YYYY HH:mm')}\n` +
            `üí≥ S·ª≠ d·ª•ng "payment packages" ƒë·ªÉ xem g√≥i d·ªãch v·ª•`;

        message.reply(infoMessage);
    },

    // Danh s√°ch g√≥i d·ªãch v·ª•
    async handlePackages(message) {
        const packages = global.GoatBot.config.payos.package;
        if (!packages) {
            return message.reply("‚ùå Ch∆∞a c·∫•u h√¨nh g√≥i d·ªãch v·ª•");
        }

        let packageText = "üì¶ DANH S√ÅCH G√ìI D·ªäCH V·ª§\n\n";
        let index = 1;

        for (const [key, pkg] of Object.entries(packages)) {
            packageText += `${index}. ${pkg.name}\n`;
            packageText += `   üí∞ Gi√°: ${pkg.price.toLocaleString()}ƒë\n`;
            packageText += `   ‚è±Ô∏è Th·ªùi h·∫°n: ${pkg.days} ng√†y\n`;
            packageText += `   üìù ${pkg.description}\n`;
            packageText += `   üí≥ Mua: payment buy ${key}\n\n`;
            index++;
        }

        packageText += `üéÅ Ho·∫∑c s·ª≠ d·ª•ng m√£ redeem: redeem <m√£>`;

        message.reply(packageText);
    },

    // Mua g√≥i d·ªãch v·ª•
    async handleBuy(message, args, threadID, senderID, threadsData, paymentHandler) {
        const packageName = args[1]?.toLowerCase();
        if (!packageName) {
            return this.handlePackages(message);
        }

        const packages = global.GoatBot.config.payos.package;
        const selectedPackage = packages[packageName];

        if (!selectedPackage) {
            return message.reply(`‚ùå G√≥i "${packageName}" kh√¥ng t·ªìn t·∫°i. S·ª≠ d·ª•ng "payment packages" ƒë·ªÉ xem danh s√°ch`);
        }

        try {
            // T√≠nh gi·∫£m gi√°
            const threadData = await threadsData.get(threadID);
            const renewalCount = threadData.data?.renewalCount || 0;
            const discountPercent = renewalCount > 0 ? this.calculateRenewalDiscount(renewalCount) : 0;

            // T·∫°o thanh to√°n
            const orderCode = paymentHandler.generateOrderCode();
            const paymentInfo = {
                orderCode: orderCode,
                amount: selectedPackage.price,
                description: `Thanh to√°n ${selectedPackage.name} - Group ${threadID}`,
                threadID: threadID,
                userID: senderID,
                packageType: packageName,
                discountPercent: discountPercent
            };

            const paymentResult = await paymentHandler.createPaymentLink(paymentInfo);

            // L∆∞u v√†o database
            const { paymentData } = global.db;
            await paymentData.create({
                transactionId: orderCode.toString(),
                threadID: threadID,
                amount: paymentResult.amount,
                status: 'PENDING',
                paymentLinkId: paymentResult.paymentLinkId,
                description: paymentInfo.description,
                packageType: packageName
            });

            // T·∫°o QR code
            let attachment = null;
            if (paymentResult.qrCode) {
                try {
                    const { filePath } = await paymentHandler.createVietQRFromRaw(
                        paymentResult.qrCode,
                        `qr_${orderCode}.png`
                    );
                    attachment = fs.createReadStream(filePath);
                } catch (qrError) {
                    console.error('QR creation error:', qrError);
                }
            }

            const replyText =
                `üí≥ ƒê√É T·∫†O THANH TO√ÅN\n\n` +
                `üì¶ G√≥i: ${selectedPackage.name}\n` +
                `üí∞ Gi√° g·ªëc: ${selectedPackage.price.toLocaleString()}ƒë\n` +
                (discountPercent > 0 ? `üéÅ Gi·∫£m gi√°: ${paymentResult.discountAmount.toLocaleString()}ƒë (${discountPercent}%)\n` : '') +
                `üíµ Th√†nh ti·ªÅn: ${paymentResult.amount.toLocaleString()}ƒë\n` +
                `‚è∞ Link c√≥ hi·ªáu l·ª±c: 30 ph√∫t\n\n` +
                `üîó Link thanh to√°n: ${paymentResult.checkoutUrl}\n\n` +
                `Ho·∫∑c qu√©t m√£ QR ƒë√≠nh k√®m üëÜ`;

            const messageData = { body: replyText };
            if (attachment) {
                messageData.attachment = attachment;
            }

            message.reply(messageData);

        } catch (error) {
            console.error('Payment creation error:', error);
            message.reply("‚ùå C√≥ l·ªói khi t·∫°o thanh to√°n: " + error.message);
        }
    },

    // Admin commands
    async handleAdmin(message, args, threadID, threadsData) {
        const subCmd = args[1]?.toLowerCase();

        switch (subCmd) {
            case "activate":
                const days = parseInt(args[2]) || 30;
                const moment = require('moment-timezone');
                const expiresAt = days > 0 ? moment().add(days, 'days').toISOString() : null;

                await threadsData.set(threadID, {
                    status: 'active',
                    activatedAt: new Date().toISOString(),
                    expiresAt: expiresAt,
                    packageType: 'admin',
                    manualActivation: true,
                    isPermanent: days === 0
                }, 'data');

                message.reply(`‚úÖ ƒê√£ k√≠ch ho·∫°t nh√≥m th√†nh c√¥ng!\n${days > 0 ? `‚è∞ Th·ªùi h·∫°n: ${days} ng√†y` : 'üëë K√≠ch ho·∫°t vƒ©nh vi·ªÖn'}`);
                break;

            case "deactivate":
                await threadsData.set(threadID, {
                    status: 'expired',
                    expiredAt: new Date().toISOString()
                }, 'data');

                message.reply("‚ùå ƒê√£ h·ªßy k√≠ch ho·∫°t nh√≥m");
                break;

            default:
                message.reply(
                    "üîß ADMIN COMMANDS:\n\n" +
                    "‚Ä¢ payment admin activate [ng√†y] - K√≠ch ho·∫°t nh√≥m\n" +
                    "‚Ä¢ payment admin activate 0 - K√≠ch ho·∫°t vƒ©nh vi·ªÖn\n" +
                    "‚Ä¢ payment admin deactivate - H·ªßy k√≠ch ho·∫°t"
                );
        }
    },

    calculateRenewalDiscount(renewalCount) {
        const baseDiscount = 5;
        const incrementDiscount = 2;
        const maxDiscount = 20;
        return Math.min(baseDiscount + (renewalCount * incrementDiscount), maxDiscount);
    }
};

console.log("H·ªá th·ªëng PayOS v√† Redeem ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ho√†n ch·ªânh!");
console.log("C·∫•u h√¨nh c·∫ßn thi·∫øt:");
console.log("1. C·∫≠p nh·∫≠t config.json v·ªõi th√¥ng tin PayOS");
console.log("2. Thi·∫øt l·∫≠p webhook URL");
console.log("3. Kh·ªüi ƒë·ªông l·∫°i bot");