const RedeemManager = require('../../bot/handler/redeemManager.js');

module.exports = {
    config: {
        name: "redeem",
        aliases: ["code", "giftcode"],
        version: "2.1",
        author: "ABC Bot",
        countDown: 5,
        role: 0,
        description: {
            vi: "S·ª≠ d·ª•ng m√£ redeem ƒë·ªÉ nh·∫≠n th∆∞·ªüng ho·∫∑c k√≠ch ho·∫°t nh√≥m",
            en: "Use redeem codes to get rewards or activate groups"
        },
        category: "system",
        guide: {
            vi: "   {pn} <m√£ code>: S·ª≠ d·ª•ng m√£ redeem\n" +
                "   {pn} create <lo·∫°i> <gi√° tr·ªã> [ghi ch√∫]: T·∫°o m√£ redeem (Admin)\n" +
                "   {pn} list: Xem danh s√°ch m√£ redeem (Admin)",
            en: "   {pn} <code>: Use redeem code\n" +
                "   {pn} create <type> <value> [notes]: Create redeem code (Admin)\n" +
                "   {pn} list: View redeem code list (Admin)"
        }
    },

    onStart: async function ({ message, args, event, getLang, role, threadsData, usersData }) {
        const { threadID, senderID } = event;
        const redeemManager = new RedeemManager();

        if (!args[0]) {
            return message.reply("‚ùå Vui l√≤ng nh·∫≠p m√£ redeem\nV√≠ d·ª•: " + global.utils.getPrefix(threadID) + "redeem BOT-ABC12345");
        }

        const subCommand = args[0].toLowerCase();

        try {
            switch (subCommand) {
                case "create":
                    await this.handleCreate(message, args, role, redeemManager);
                    break;
                case "list":
                    await this.handleList(message, args, role, redeemManager);
                    break;
                default:
                    await this.handleUse(message, args[0], threadID, senderID, redeemManager, threadsData, usersData);
                    break;
            }
        } catch (error) {
            console.error("Redeem command error:", error);
            message.reply("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau");
        }
    },

    // S·ª≠ d·ª•ng m√£ redeem v·ªõi t√≠ch h·ª£p database
    async handleUse(message, code, threadID, senderID, redeemManager, threadsData, usersData) {
        if (!redeemManager.validateRedeemCode(code)) {
            return message.reply("‚ùå M√£ redeem kh√¥ng h·ª£p l·ªá\nFormat ƒë√∫ng: BOT-XXXXXXXX");
        }

        try {
            // S·ª≠ d·ª•ng m√£ redeem
            const result = await redeemManager.useRedeemCode(code.toUpperCase(), threadID, senderID);

            if (result.success) {
                let successMessage = result.message;

                // X·ª≠ l√Ω k√≠ch ho·∫°t nh√≥m
                if (result.activationResult) {
                    if (result.activationResult.isPermanent) {
                        successMessage += `\nüëë Nh√≥m ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t Vƒ®NH VI·ªÑN!`;
                    } else if (result.activationResult.expiresAt) {
                        const moment = require('moment-timezone');
                        const expiryDate = moment(result.activationResult.expiresAt).format('DD/MM/YYYY HH:mm');
                        successMessage += `\n‚è∞ Nh√≥m k√≠ch ho·∫°t ƒë·∫øn: ${expiryDate}`;
                    }
                }

                // X·ª≠ l√Ω th√™m ti·ªÅn
                if (result.rewardType === 'MONEY' && result.rewardValue > 0) {
                    await usersData.addMoney(senderID, result.rewardValue);
                    successMessage += `\nüí∞ ƒê√£ th√™m ${result.rewardValue.toLocaleString()}ƒë v√†o t√†i kho·∫£n`;
                }

                return message.reply("üéâ S·ª¨ D·ª§NG M√É REDEEM TH√ÄNH C√îNG!\n\n" + successMessage);
            } else {
                return message.reply("‚ùå " + result.message);
            }

        } catch (error) {
            console.error('Redeem use error:', error);
            message.reply("‚ùå C√≥ l·ªói khi s·ª≠ d·ª•ng m√£ redeem: " + error.message);
        }
    },

    // T·∫°o m√£ redeem (Admin only)
    async handleCreate(message, args, role, redeemManager) {
        if (role < 2) {
            return message.reply("‚ùå Ch·ªâ admin bot m·ªõi c√≥ th·ªÉ t·∫°o m√£ redeem");
        }

        if (args.length < 3) {
            return message.reply(
                "üìù C√°ch t·∫°o m√£ redeem:\n" +
                "‚Ä¢ redeem create DAYS <s·ªë ng√†y> [ghi ch√∫]\n" +
                "‚Ä¢ redeem create PERMANENT 0 [ghi ch√∫]\n" +
                "‚Ä¢ redeem create MONEY <s·ªë ti·ªÅn> [ghi ch√∫]\n\n" +
                "V√≠ d·ª•:\n" +
                "‚Ä¢ redeem create DAYS 30 Event th√°ng 12\n" +
                "‚Ä¢ redeem create PERMANENT 0 Gift VIP"
            );
        }

        const rewardType = args[1].toUpperCase();
        const rewardValue = parseInt(args[2]);
        const notes = args.slice(3).join(' ') || 'Kh√¥ng c√≥ ghi ch√∫';

        if (!['DAYS', 'PERMANENT', 'MONEY'].includes(rewardType)) {
            return message.reply("‚ùå Lo·∫°i m√£ kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£: DAYS, PERMANENT, MONEY");
        }

        if (rewardType !== 'PERMANENT' && (isNaN(rewardValue) || rewardValue <= 0)) {
            return message.reply("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá. Ph·∫£i l√† s·ªë > 0 (tr·ª´ PERMANENT = 0)");
        }

        try {
            const codes = await redeemManager.createRedeemCode({
                rewardType: rewardType,
                rewardValue: rewardType === 'PERMANENT' ? 0 : rewardValue,
                notes: notes,
                quantity: 1
            });

            let valueText = '';
            switch (rewardType) {
                case 'DAYS':
                    valueText = `${rewardValue} ng√†y`;
                    break;
                case 'PERMANENT':
                    valueText = 'Vƒ©nh vi·ªÖn';
                    break;
                case 'MONEY':
                    valueText = `${rewardValue.toLocaleString()}ƒë`;
                    break;
            }

            message.reply(
                `‚úÖ T·∫°o m√£ redeem th√†nh c√¥ng!\n\n` +
                `üéÅ M√£: \`${codes[0]}\`\n` +
                `üì¶ Lo·∫°i: ${rewardType}\n` +
                `üíé Gi√° tr·ªã: ${valueText}\n` +
                `üìù Ghi ch√∫: ${notes}`
            );

        } catch (error) {
            console.error('Create redeem error:', error);
            message.reply("‚ùå L·ªói khi t·∫°o m√£ redeem: " + error.message);
        }
    }
};