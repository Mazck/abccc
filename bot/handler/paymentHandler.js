const PayOS = require('@payos/node');
const fs = require('fs');
const path = require('path');
const moment = require('moment-timezone');

class PaymentHandler {
    constructor() {
        this.config = global.GoatBot.config.payos;
        this.payOS = new PayOS(
            this.config.clientId,
            this.config.apiKey,
            this.config.checksumKey
        );
    }

    // T·∫°o m√£ ƒë∆°n h√†ng duy nh·∫•t
    generateOrderCode() {
        return Math.floor(Date.now() / 1000);
    }

    // T·∫°o link thanh to√°n
    async createPaymentLink(paymentInfo) {
        try {
            const { orderCode, amount, description, threadID, userID, packageType, discountPercent = 0 } = paymentInfo;

            // √Åp d·ª•ng gi·∫£m gi√°
            const finalAmount = Math.floor(amount * (1 - discountPercent / 100));

            const paymentData = {
                orderCode: orderCode,
                amount: finalAmount,
                description: description,
                cancelUrl: this.config.cancelUrl || `${this.config.webhookUrl}/payment-cancel`,
                returnUrl: this.config.returnUrl || `${this.config.webhookUrl}/payment-success`,
                signature: null,
                items: [{
                    name: this.config.package[packageType]?.name || "D·ªãch v·ª• bot",
                    quantity: 1,
                    price: finalAmount
                }],
                buyerName: `User ${userID}`,
                buyerEmail: `user${userID}@example.com`,
                buyerPhone: "0123456789",
                buyerAddress: "Vi·ªát Nam",
                expiredAt: Math.floor(Date.now() / 1000) + (30 * 60) // 30 ph√∫t
            };

            const paymentLinkResponse = await this.payOS.createPaymentLink(paymentData);

            return {
                checkoutUrl: paymentLinkResponse.checkoutUrl,
                paymentLinkId: paymentLinkResponse.paymentLinkId,
                qrCode: paymentLinkResponse.qrCode,
                amount: finalAmount,
                originalAmount: amount,
                discountAmount: amount - finalAmount
            };
        } catch (error) {
            console.error('Error creating payment link:', error);
            throw error;
        }
    }

    // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
    async checkPaymentStatus(paymentLinkId) {
        try {
            const paymentInfo = await this.payOS.getPaymentLinkInformation(paymentLinkId);
            return paymentInfo;
        } catch (error) {
            console.error('Error checking payment status:', error);
            throw error;
        }
    }

    // X·ª≠ l√Ω webhook PayOS
    async handleWebhook(webhookData) {
        try {
            // X√°c minh webhook signature
            const isValidSignature = this.payOS.verifyPaymentWebhookData(webhookData);
            if (!isValidSignature) {
                throw new Error('Invalid webhook signature');
            }

            const { orderCode, code, desc, data } = webhookData;

            if (code === '00') {
                // Thanh to√°n th√†nh c√¥ng
                await this.processSuccessfulPayment(orderCode, data);
            } else {
                // Thanh to√°n th·∫•t b·∫°i
                await this.processFailedPayment(orderCode, desc);
            }

            return { success: true };
        } catch (error) {
            console.error('Error handling webhook:', error);
            throw error;
        }
    }

    // X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
    async processSuccessfulPayment(orderCode, paymentData) {
        const { paymentData: paymentDataController, threadsData } = global.db;

        // T√¨m th√¥ng tin thanh to√°n
        const payment = await paymentDataController.findByTransactionId(orderCode.toString());
        if (!payment) {
            console.error('Payment not found:', orderCode);
            return;
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
        await paymentDataController.updatePaymentStatus(
            orderCode.toString(),
            'PAID',
            new Date().toISOString(),
            paymentData
        );

        // K√≠ch ho·∫°t nh√≥m
        await this.activateGroup(payment.threadID, payment.packageType || 'basic');

        // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        await this.sendPaymentSuccessNotification(payment.threadID, payment);
    }

    // X·ª≠ l√Ω thanh to√°n th·∫•t b·∫°i
    async processFailedPayment(orderCode, reason) {
        const { paymentData: paymentDataController } = global.db;

        await paymentDataController.updatePaymentStatus(
            orderCode.toString(),
            'FAILED',
            new Date().toISOString(),
            { reason }
        );
    }

    // K√≠ch ho·∫°t nh√≥m
    async activateGroup(threadID, packageType) {
        const { threadsData } = global.db;
        const packageInfo = this.config.package[packageType];

        if (!packageInfo) {
            console.error('Package not found:', packageType);
            return;
        }

        const expiresAt = moment().add(packageInfo.days, 'days').toISOString();

        await threadsData.set(threadID, {
            status: 'active',
            activatedAt: new Date().toISOString(),
            expiresAt: expiresAt,
            packageType: packageType,
            renewalCount: (await threadsData.get(threadID, 'data.renewalCount', 0)) + 1
        }, 'data');

        console.log(`‚úÖ Activated group ${threadID} with package ${packageType} until ${expiresAt}`);
    }

    // T√≠nh to√°n gi·∫£m gi√° gia h·∫°n
    calculateRenewalDiscount(renewalCount) {
        // Gi·∫£m gi√° t√≠ch l≈©y: 5% cho l·∫ßn gia h·∫°n ƒë·∫ßu ti√™n, tƒÉng 2% m·ªói l·∫ßn, t·ªëi ƒëa 20%
        const baseDiscount = 5;
        const incrementDiscount = 2;
        const maxDiscount = 20;

        const discount = Math.min(baseDiscount + (renewalCount * incrementDiscount), maxDiscount);
        return discount;
    }

    // G·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng
    async sendPaymentSuccessNotification(threadID, payment) {
        const api = global.GoatBot.fcaApi;
        if (!api) return;

        const packageInfo = this.config.package[payment.packageType || 'basic'];
        const message = `üéâ THANH TO√ÅN TH√ÄNH C√îNG!\n\n` +
            `‚úÖ Nh√≥m ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t\n` +
            `üì¶ G√≥i: ${packageInfo.name}\n` +
            `üí∞ S·ªë ti·ªÅn: ${payment.amount.toLocaleString()}ƒë\n` +
            `‚è∞ Th·ªùi h·∫°n: ${packageInfo.days} ng√†y\n` +
            `üéØ C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!`;

        try {
            await api.sendMessage(message, threadID);
        } catch (error) {
            console.error('Error sending success notification:', error);
        }
    }

    // Ki·ªÉm tra nh√≥m s·∫Øp h·∫øt h·∫°n (ch·∫°y ƒë·ªãnh k·ª≥)
    async checkExpiringGroups() {
        const { threadsData } = global.db;
        const api = global.GoatBot.fcaApi;
        if (!api) return;

        try {
            const allThreads = await threadsData.getAll();
            const now = moment();

            for (const thread of allThreads) {
                if (!thread.data || thread.data.status !== 'active') continue;

                const expiresAt = moment(thread.data.expiresAt);
                const daysLeft = expiresAt.diff(now, 'days');

                // Th√¥ng b√°o khi c√≤n 3 ng√†y, 1 ng√†y v√† khi h·∫øt h·∫°n
                if ([3, 1].includes(daysLeft)) {
                    const renewalDiscount = this.calculateRenewalDiscount(thread.data.renewalCount || 0);

                    const message = `‚ö†Ô∏è TH√îNG B√ÅO H·∫æT H·∫†N\n\n` +
                        `üìÖ Nh√≥m s·∫Ω h·∫øt h·∫°n trong ${daysLeft} ng√†y\n` +
                        `üí° Gia h·∫°n ngay ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng\n` +
                        `üéÅ Gi·∫£m gi√° gia h·∫°n: ${renewalDiscount}%\n\n` +
                        `S·ª≠ d·ª•ng l·ªánh "!payment renew" ƒë·ªÉ gia h·∫°n`;

                    await api.sendMessage(message, thread.threadID);
                } else if (daysLeft <= 0) {
                    // H·∫øt h·∫°n
                    await threadsData.set(thread.threadID, {
                        status: 'expired',
                        expiredAt: new Date().toISOString()
                    }, 'data');

                    const message = `‚ùå NH√ìM ƒê√É H·∫æT H·∫†N\n\n` +
                        `Bot ƒë√£ t·∫°m ng·ª´ng ho·∫°t ƒë·ªông trong nh√≥m\n` +
                        `S·ª≠ d·ª•ng l·ªánh "!payment renew" ƒë·ªÉ gia h·∫°n`;

                    await api.sendMessage(message, thread.threadID);
                }
            }
        } catch (error) {
            console.error('Error checking expiring groups:', error);
        }
    }

    // T·∫°o QR code t·ª´ chu·ªói VietQR
    async createVietQRFromRaw(qrData, filename = 'payment_qr.png') {
        return new Promise((resolve, reject) => {
            const https = require('https');
            const fs = require('fs');
            const path = require('path');

            const encodedData = encodeURIComponent(qrData);
            const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?data=${encodedData}&size=300x300`;
            const filePath = path.join(__dirname, '..', 'temp', filename);

            // T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a c√≥
            const tempDir = path.dirname(filePath);
            if (!fs.existsSync(tempDir)) {
                fs.mkdirSync(tempDir, { recursive: true });
            }

            const file = fs.createWriteStream(filePath);
            https.get(qrUrl, (res) => {
                if (res.statusCode !== 200) {
                    reject(new Error(`L·ªói t·∫°o m√£ QR: ${res.statusCode}`));
                    return;
                }

                res.pipe(file);
                file.on('finish', () => {
                    file.close(() => {
                        resolve({ filePath, qrUrl });
                    });
                });
            }).on('error', (err) => {
                fs.unlink(filePath, () => reject(err));
            });
        });
    }
}

module.exports = PaymentHandler;